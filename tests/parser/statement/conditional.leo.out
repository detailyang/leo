---
namespace: ParseStatement
expectation: Pass
outputs:
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":4,\\\"col_stop\\\":5,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if x {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: conditional.leo
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: conditional.leo
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 6
          col_stop: 2
          path: conditional.leo
          content: "if x {\n...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: conditional.leo
        content: "if x {\n...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"Self\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":4,\\\"col_stop\\\":8,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if Self {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: conditional.leo
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: conditional.leo
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 9
          col_stop: 2
          path: conditional.leo
          content: "if Self {\n...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: conditional.leo
        content: "if Self {\n...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if (x) {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: conditional.leo
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: conditional.leo
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 8
          col_stop: 2
          path: conditional.leo
          content: "if (x) {\n...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: conditional.leo
        content: "if (x) {\n...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if (x) {}\\\"}\"}"
      block:
        statements: []
        span:
          line_start: 1
          line_stop: 1
          col_start: 8
          col_stop: 10
          path: conditional.leo
          content: "if (x) {}"
      next: ~
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 10
        path: conditional.leo
        content: "if (x) {}"
  - Conditional:
      condition:
        Binary:
          left:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":4,\\\"col_stop\\\":5,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if x+y {}\\\"}\"}"
          right:
            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":6,\\\"col_stop\\\":7,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if x+y {}\\\"}\"}"
          op: Add
          span:
            line_start: 1
            line_stop: 1
            col_start: 4
            col_stop: 7
            path: conditional.leo
            content: "if x+y {}"
      block:
        statements: []
        span:
          line_start: 1
          line_stop: 1
          col_start: 8
          col_stop: 10
          path: conditional.leo
          content: "if x+y {}"
      next: ~
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 10
        path: conditional.leo
        content: "if x+y {}"
  - Conditional:
      condition:
        Binary:
          left:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":4,\\\"col_stop\\\":5,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if x+y {\\\"}\"}"
          right:
            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":6,\\\"col_stop\\\":7,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"if x+y {\\\"}\"}"
          op: Add
          span:
            line_start: 1
            line_stop: 1
            col_start: 4
            col_stop: 7
            path: conditional.leo
            content: "if x+y {"
      block:
        statements:
          - Expression:
              expression:
                Identifier: "{\"name\":\"expr\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":1,\\\"col_stop\\\":5,\\\"path\\\":\\\"conditional.leo\\\",\\\"content\\\":\\\"expr;\\\"}\"}"
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 5
                path: conditional.leo
                content: expr;
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 8
                    col_stop: 10
                    path: conditional.leo
                    content: return ();
              span:
                line_start: 3
                line_stop: 3
                col_start: 1
                col_stop: 10
                path: conditional.leo
                content: return ();
        span:
          line_start: 1
          line_stop: 4
          col_start: 8
          col_stop: 2
          path: conditional.leo
          content: "if x+y {\n...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 4
        col_start: 1
        col_stop: 2
        path: conditional.leo
        content: "if x+y {\n...\n}\n"
