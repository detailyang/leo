---
namespace: ParseStatement
expectation: Pass
outputs:
  - Block:
      statements: []
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 3
        path: ""
        content: "{}"
  - Block:
      statements:
        - Return:
            expression:
              TupleInit:
                elements: []
                span:
                  line_start: 2
                  line_stop: 2
                  col_start: 8
                  col_stop: 10
                  path: ""
                  content: return ();
            span:
              line_start: 2
              line_stop: 2
              col_start: 1
              col_stop: 10
              path: ""
              content: return ();
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: ""
        content: "{\n     ...\n}"
  - Block:
      statements:
        - Block:
            statements: []
            span:
              line_start: 1
              line_stop: 1
              col_start: 2
              col_stop: 4
              path: ""
              content: "{{}}"
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 5
        path: ""
        content: "{{}}"
  - Block:
      statements:
        - Block:
            statements:
              - Return:
                  expression:
                    TupleInit:
                      elements: []
                      span:
                        line_start: 3
                        line_stop: 3
                        col_start: 8
                        col_stop: 10
                        path: ""
                        content: return ();
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 1
                    col_stop: 10
                    path: ""
                    content: return ();
            span:
              line_start: 2
              line_stop: 4
              col_start: 1
              col_stop: 2
              path: ""
              content: "{\n     ...\n}"
      span:
        line_start: 1
        line_stop: 5
        col_start: 1
        col_stop: 2
        path: ""
        content: "{\n     ...\n     ...\n     ...\n}"
  - Block:
      statements:
        - Conditional:
            condition:
              Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":4,\\\"col_stop\\\":5,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if x {\\\"}\"}"
            block:
              statements:
                - Return:
                    expression:
                      TupleInit:
                        elements: []
                        span:
                          line_start: 3
                          line_stop: 3
                          col_start: 8
                          col_stop: 10
                          path: ""
                          content: return ();
                    span:
                      line_start: 3
                      line_stop: 3
                      col_start: 1
                      col_stop: 10
                      path: ""
                      content: return ();
              span:
                line_start: 2
                line_stop: 4
                col_start: 6
                col_stop: 2
                path: ""
                content: "if x {\n     ...\n}"
            next: ~
            span:
              line_start: 2
              line_stop: 4
              col_start: 1
              col_stop: 2
              path: ""
              content: "if x {\n     ...\n}"
      span:
        line_start: 1
        line_stop: 5
        col_start: 1
        col_stop: 2
        path: ""
        content: "{\n     ...\n     ...\n     ...\n}"
