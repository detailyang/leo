---
namespace: ParseExpression
expectation: Pass
outputs:
  - Unary:
      inner:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":2,\\\"col_stop\\\":3,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x\\\"}\"}"
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 3
        path: ""
        content: "!x"
  - Unary:
      inner:
        CircuitMemberAccess:
          circuit:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":2,\\\"col_stop\\\":3,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x.y\\\"}\"}"
          name: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":4,\\\"col_stop\\\":5,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x.y\\\"}\"}"
          span:
            line_start: 1
            line_stop: 1
            col_start: 2
            col_stop: 5
            path: ""
            content: "!x.y"
          type_: ~
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 5
        path: ""
        content: "!x.y"
  - Unary:
      inner:
        CircuitStaticFunctionAccess:
          circuit:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":2,\\\"col_stop\\\":3,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x::y\\\"}\"}"
          name: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x::y\\\"}\"}"
          span:
            line_start: 1
            line_stop: 1
            col_start: 2
            col_stop: 6
            path: ""
            content: "!x::y"
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 6
        path: ""
        content: "!x::y"
  - Unary:
      inner:
        Call:
          function:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":2,\\\"col_stop\\\":3,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!x()\\\"}\"}"
          arguments: []
          span:
            line_start: 1
            line_stop: 1
            col_start: 2
            col_stop: 5
            path: ""
            content: "!x()"
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 5
        path: ""
        content: "!x()"
  - Unary:
      inner:
        Unary:
          inner:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":3,\\\"col_stop\\\":4,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!!x\\\"}\"}"
          op: Not
          span:
            line_start: 1
            line_stop: 1
            col_start: 2
            col_stop: 4
            path: ""
            content: "!!x"
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 4
        path: ""
        content: "!!x"
  - Unary:
      inner:
        Unary:
          inner:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":3,\\\"col_stop\\\":4,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"!-x\\\"}\"}"
          op: Negate
          span:
            line_start: 1
            line_stop: 1
            col_start: 2
            col_stop: 4
            path: ""
            content: "!-x"
      op: Not
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 4
        path: ""
        content: "!-x"
