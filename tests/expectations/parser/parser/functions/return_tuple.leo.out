---
namespace: Parse
expectation: Pass
outputs:
  - name: ""
    expected_input: []
    imports: []
    circuits: {}
    global_consts: {}
    functions:
      "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":11,\\\"path\\\":\\\"test\\\",\\\"content\\\":\\\"function x() -> (u32, u32) {\\\"}\"}":
        annotations: []
        identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":11,\\\"path\\\":\\\"test\\\",\\\"content\\\":\\\"function x() -> (u32, u32) {\\\"}\"}"
        input: []
        output:
          Tuple:
            - IntegerType: U32
            - IntegerType: U32
        block:
          statements:
            - Return:
                expression:
                  TupleInit:
                    elements: []
                    span:
                      line_start: 4
                      line_stop: 4
                      col_start: 12
                      col_stop: 14
                      path: test
                      content: "    return ();"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 5
                  col_stop: 14
                  path: test
                  content: "    return ();"
          span:
            line_start: 3
            line_stop: 5
            col_start: 28
            col_stop: 2
            path: test
            content: "function x() -> (u32, u32) {\n...\n}"
        span:
          line_start: 3
          line_stop: 5
          col_start: 1
          col_stop: 2
          path: test
          content: "function x() -> (u32, u32) {\n...\n}"
